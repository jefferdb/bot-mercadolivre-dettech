"""
Script para restaurar todas as regras e configura√ß√µes
Executa automaticamente no deploy Railway
"""

import os
import sys
import json
from datetime import datetime

# Adicionar src ao path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

def restore_all_rules():
    """Restaurar todas as regras no banco"""
    try:
        from models.user import db
        from models.mercadolivre import MLAutoResponse, MLAbsenceResponse
        from flask import Flask
        
        # Configurar Flask temporariamente
        app = Flask(__name__)
        
        # Configura√ß√£o do banco
        DATABASE_URL = os.environ.get('DATABASE_URL')
        if DATABASE_URL:
            if DATABASE_URL.startswith('postgres://'):
                DATABASE_URL = DATABASE_URL.replace('postgres://', 'postgresql://', 1)
            app.config['SQLALCHEMY_DATABASE_URI'] = DATABASE_URL
        else:
            app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///temp.db'
        
        app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
        db.init_app(app)
        
        with app.app_context():
            # Todas as regras
            rules_data = [
                {
                    "name": "Sauda√ß√£o e Boas-vindas",
                    "keywords": ["ol√°", "oi", "bom dia", "boa tarde", "boa noite", "tudo bem"],
                    "response": "Ol√°! Seja muito bem-vindo √† DETTECH! Estamos aqui para ajud√°-lo com pe√ßas automotivas de qualidade. Como posso auxili√°-lo hoje? Atenciosamente, Jeff - Equipe DETTECH.",
                    "priority": 1,
                    "active": True
                },
                {
                    "name": "Compatibilidade - Numera√ß√£o Original",
                    "keywords": ["compat√≠vel", "serve", "funciona", "encaixa", "modelo", "ano"],
                    "response": "Ol√°, seja bem-vindo √† DETTECH! Para confirmar a compatibilidade, precisamos que informe a numera√ß√£o original constante na sua pe√ßa. Atenciosamente, Jeff - Equipe DETTECH.",
                    "priority": 10,
                    "active": True
                },
                {
                    "name": "Prazo de Entrega",
                    "keywords": ["prazo", "entrega", "demora", "quando chega", "tempo", "dias"],
                    "response": "O prazo de entrega varia conforme sua localiza√ß√£o. Ap√≥s a confirma√ß√£o do pagamento, o envio √© realizado em at√© 1 dia √∫til. O prazo de entrega pelos Correios √© de 3 a 10 dias √∫teis. Atenciosamente, Jeff - Equipe DETTECH.",
                    "priority": 8,
                    "active": True
                },
                {
                    "name": "Garantia",
                    "keywords": ["garantia", "defeito", "problema", "troca", "devolu√ß√£o"],
                    "response": "Todos os nossos produtos possuem garantia de 90 dias contra defeitos de fabrica√ß√£o. Em caso de problemas, entre em contato conosco que resolveremos rapidamente. Atenciosamente, Jeff - Equipe DETTECH.",
                    "priority": 9,
                    "active": True
                },
                {
                    "name": "Pre√ßo e Pagamento",
                    "keywords": ["pre√ßo", "valor", "custa", "pagamento", "desconto", "parcelamento"],
                    "response": "O pre√ßo est√° anunciado no produto. Aceitamos PIX (com desconto), cart√£o de cr√©dito e d√©bito. Para PIX, oferecemos desconto especial. Atenciosamente, Jeff - Equipe DETTECH.",
                    "priority": 7,
                    "active": True
                },
                {
                    "name": "Disponibilidade",
                    "keywords": ["dispon√≠vel", "estoque", "tem", "pronta entrega"],
                    "response": "Sim, temos o produto em estoque e pronta entrega! Pode finalizar sua compra que enviaremos rapidamente. Atenciosamente, Jeff - Equipe DETTECH.",
                    "priority": 6,
                    "active": True
                },
                {
                    "name": "Instala√ß√£o e Manual",
                    "keywords": ["instalar", "instala√ß√£o", "como", "manual", "instru√ß√µes"],
                    "response": "O produto vem com instru√ß√µes b√°sicas. Para instala√ß√£o profissional, recomendamos procurar um t√©cnico especializado. Estamos dispon√≠veis para esclarecer d√∫vidas t√©cnicas. Atenciosamente, Jeff - Equipe DETTECH.",
                    "priority": 5,
                    "active": True
                },
                {
                    "name": "Agradecimento",
                    "keywords": ["obrigado", "obrigada", "valeu", "agrade√ßo"],
                    "response": "Por nada! Ficamos felizes em ajudar. A DETTECH est√° sempre √† disposi√ß√£o para oferecer as melhores pe√ßas e atendimento. Volte sempre! Atenciosamente, Jeff - Equipe DETTECH.",
                    "priority": 2,
                    "active": True
                },
                {
                    "name": "Estoque",
                    "keywords": ["quantos", "quantidade", "unidades", "pe√ßas"],
                    "response": "Temos boa quantidade em estoque. Caso precise de grandes quantidades, consulte-nos para condi√ß√µes especiais. Atenciosamente, Jeff - Equipe DETTECH.",
                    "priority": 4,
                    "active": True
                },
                {
                    "name": "Medidas e Especifica√ß√µes",
                    "keywords": ["medida", "tamanho", "dimens√£o", "especifica√ß√£o", "ficha t√©cnica"],
                    "response": "As especifica√ß√µes t√©cnicas est√£o descritas no an√∫ncio. Para informa√ß√µes mais detalhadas ou medidas espec√≠ficas, informe o modelo do seu ve√≠culo que te auxiliaremos. Atenciosamente, Jeff - Equipe DETTECH.",
                    "priority": 3,
                    "active": True
                }
            ]
            
            print("ü§ñ Restaurando regras de resposta...")
            rules_created = 0
            
            for rule_data in rules_data:
                # Verificar se j√° existe
                existing = MLAutoResponse.query.filter_by(name=rule_data["name"]).first()
                if existing:
                    print(f"   ‚ö†Ô∏è Regra '{rule_data['name']}' j√° existe")
                    continue
                
                # Criar nova regra
                rule = MLAutoResponse(
                    name=rule_data["name"],
                    keywords=json.dumps(rule_data["keywords"], ensure_ascii=False),
                    response=rule_data["response"],
                    priority=rule_data["priority"],
                    active=rule_data["active"],
                    created_at=datetime.now()
                )
                
                db.session.add(rule)
                rules_created += 1
                print(f"   ‚úÖ Regra '{rule_data['name']}' criada")
            
            # Configura√ß√µes de aus√™ncia
            absence_data = [
                {
                    "name": "Fora do Hor√°rio Comercial",
                    "message": "Ol√°! Obrigado pelo seu contato. No momento estamos fora do hor√°rio de atendimento (09:00 √†s 18:00). Retornaremos sua mensagem no pr√≥ximo dia √∫til. Atenciosamente, Jeff - Equipe DETTECH.",
                    "start_time": "18:01",
                    "end_time": "08:59",
                    "weekdays_only": False,
                    "active": True
                },
                {
                    "name": "Final de Semana",
                    "message": "Ol√°! Obrigado pelo seu contato. Nosso atendimento funciona de segunda a sexta-feira, das 09:00 √†s 18:00. Retornaremos sua mensagem no pr√≥ximo dia √∫til. Atenciosamente, Jeff - Equipe DETTECH.",
                    "start_time": "00:00",
                    "end_time": "23:59",
                    "weekdays_only": True,
                    "active": True
                }
            ]
            
            print("üåô Restaurando configura√ß√µes de aus√™ncia...")
            absence_created = 0
            
            for absence in absence_data:
                # Verificar se j√° existe
                existing = MLAbsenceResponse.query.filter_by(name=absence["name"]).first()
                if existing:
                    print(f"   ‚ö†Ô∏è Configura√ß√£o '{absence['name']}' j√° existe")
                    continue
                
                # Criar nova configura√ß√£o
                config = MLAbsenceResponse(
                    name=absence["name"],
                    message=absence["message"],
                    start_time=absence["start_time"],
                    end_time=absence["end_time"],
                    weekdays_only=absence["weekdays_only"],
                    active=absence["active"],
                    created_at=datetime.now()
                )
                
                db.session.add(config)
                absence_created += 1
                print(f"   ‚úÖ Configura√ß√£o '{absence['name']}' criada")
            
            # Salvar tudo
            db.session.commit()
            
            print(f"‚úÖ Restaura√ß√£o conclu√≠da!")
            print(f"   üìã {rules_created} regras criadas")
            print(f"   üåô {absence_created} configura√ß√µes de aus√™ncia criadas")
            
            return True
            
    except Exception as e:
        print(f"‚ùå Erro na restaura√ß√£o: {e}")
        return False

if __name__ == "__main__":
    success = restore_all_rules()
    if success:
        print("üéâ Todas as configura√ß√µes foram restauradas!")
    else:
        print("‚ùå Erro na restaura√ß√£o das configura√ß√µes")

